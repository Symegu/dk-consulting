# Generated by Django 3.2.15 on 2022-11-17 14:12

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='BaseModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True,
                 primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(
                    auto_now_add=True, verbose_name='Дата обращения')),
                ('updated_at', models.DateTimeField(
                    auto_now=True, verbose_name='Дата обновления')),
            ],
        ),
        migrations.CreateModel(
            name='Material',
            fields=[
                ('id', models.BigAutoField(auto_created=True,
                 primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=64, verbose_name='Имя файла')),
                ('description', models.CharField(
                    max_length=128, verbose_name='Описание файла')),
                ('for_clients', models.BooleanField(
                    default=False, verbose_name='Только для клиентов')),
                ('file_name', models.FileField(
                    upload_to='uploads/', verbose_name='Файл pdf')),
            ],
            options={
                'verbose_name': 'Полезный материал',
                'verbose_name_plural': 'Полезные материалы',
            },
        ),
        migrations.CreateModel(
            name='Customer',
            fields=[
                ('basemodel_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE,
                 parent_link=True, primary_key=True, serialize=False, to='mainapp.basemodel')),
                ('request_type', models.CharField(choices=[('AUDIT', 'АУДИТ'), ('IND_CONSLT', 'ПРОМЫШЛЕННЫЙ КОНСАЛТИНГ'), (
                    'ORG', 'ОРГАНИЗАЦИЯ ПРОИЗВОДСТВА'), ('LRN', 'ОБУЧЕНИЕ')], max_length=64, verbose_name='Тип запроса')),
                ('channel_type', models.CharField(choices=[('SCL', 'СОЦИАЛЬНЫЕ СЕТИ'), ('WEB', 'ПОИСК В ИНТЕРНЕТЕ'), (
                    'REC', 'РЕКОМЕНДАЦИИ'), ('OTHER', 'ДРУГОЙ ИСТОЧНИК')], max_length=64, verbose_name='Источник информации')),
                ('customer_name', models.CharField(
                    max_length=128, verbose_name='ФИО')),
                ('phone_number', models.CharField(max_length=16, unique=True, validators=[django.core.validators.RegexValidator(
                    regex='^((8|\\+7)[\\- ]?)?(\\(?\\d{4}\\)?[\\- ]?)?[\\d\\- ]{7,10}$')], verbose_name='Номер телефона')),
                ('email', models.EmailField(blank=True,
                 max_length=254, unique=True, verbose_name='Email')),
                ('comment', models.TextField(verbose_name='Текст запроса')),
                ('is_contacted', models.BooleanField(
                    default=False, verbose_name='Контакт состоялся')),
            ],
            options={
                'verbose_name': 'Запрос с сайта',
                'verbose_name_plural': 'Запросы с сайта',
            },
            bases=('mainapp.basemodel',),
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(
                    max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(
                    blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False,
                 help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('id', models.AutoField(primary_key=True, serialize=False, unique=True)),
                ('username', models.CharField(max_length=50, unique=True)),
                ('email', models.EmailField(max_length=100, unique=True)),
                ('is_active', models.BooleanField(default=True)),
                ('is_staff', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.',
                 related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.',
                 related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'abstract': False,
            },
        ),
    ]
